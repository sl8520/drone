version: '3'

networks:
  dronenet:
    driver: ${NETWORKS_DRIVER}

services:
  nginx:
    build: ./nginx
    volumes:
      # - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - drone-server
    networks:
        - dronenet

  drone-server:
    image: drone/drone:1
    ports:
      - ${DRONE_SERVER_PORT}:80
    volumes:
      - ${DATA_PATH_HOST}/drone:/data
    restart: always
    environment:
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}

      # Gitlab Config
      - DRONE_GITLAB_SERVER=${DRONE_GITLAB_SERVER}
      - DRONE_GITLAB_CLIENT_ID=${DRONE_GITLAB_CLIENT_ID}
      - DRONE_GITLAB_CLIENT_SECRET=${DRONE_GITLAB_CLIENT_SECRET}

      # use of debugging
      - DRONE_LOGS_DEBUG=${DRONE_SERVER_DEBUG}
      - DRONE_LOGS_PRETTY=${DRONE_SERVER_DEBUG}
      - DRONE_LOGS_COLOR=${DRONE_SERVER_DEBUG}
    networks:
      - dronenet

  # runner for docker version
  drone-runner:
    image: drone/drone-runner-docker:1
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_HOST=${DRONE_RPC_HOST}
      - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=${DRONE_RUNNER_CAPACITY}
    networks:
      - dronenet